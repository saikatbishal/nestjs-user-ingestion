version: "3.8"

# ===========================================
# NestJS Document Ingestion System
# Multi-service Docker Compose Configuration
# ===========================================

services:
  # ===========================================
  # PostgreSQL Database
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: nestjs-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-nestjs_docs}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-saikatbishal}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - nestjs-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-nestjs_docs}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G

  # ===========================================
  # Redis Cache & Session Store
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  # ===========================================
  # NestJS Application
  # ===========================================
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: nestjs-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASS:-saikatbishal}
      DB_NAME: ${DB_NAME:-nestjs_docs}
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME:-15m}
      JWT_REFRESH_EXPIRATION_TIME: ${JWT_REFRESH_EXPIRATION_TIME:-7d}
      # Application Configuration
      UPLOAD_PATH: ${UPLOAD_PATH:-./uploads}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      # External Services
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - nestjs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1G
        reservations:
          cpus: "1"
          memory: 512M

  # ===========================================
  # Nginx Load Balancer & Reverse Proxy
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: nestjs-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - app_uploads:/var/www/uploads:ro
    networks:
      - nestjs-network
    depends_on:
      - app
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 256M

  # ===========================================
  # Elasticsearch for Document Search & Indexing
  # ===========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nestjs-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - nestjs-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G

  # ===========================================
  # Kibana for Elasticsearch Management (Optional)
  # ===========================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: nestjs-kibana
    restart: unless-stopped
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_URL: http://elasticsearch:9200
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - nestjs-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G

  # ===========================================
  # Prometheus for Metrics Collection (Optional)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: nestjs-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=30d"
    networks:
      - nestjs-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

  # ===========================================
  # Grafana for Metrics Visualization (Optional)
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: nestjs-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - nestjs-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

  # ===========================================
  # File Upload & Processing Service (Future)
  # ===========================================
  file-processor:
    image: nestjs-file-processor:latest
    container_name: nestjs-file-processor
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    volumes:
      - app_uploads:/app/uploads
    networks:
      - nestjs-network
    depends_on:
      - redis
      - elasticsearch
    profiles:
      - processing
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1G

# ===========================================
# Networks
# ===========================================
networks:
  nestjs-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ===========================================
# Persistent Volumes
# ===========================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/redis
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/elasticsearch
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/grafana
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/nginx
